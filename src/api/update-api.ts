/* tslint:disable */
/* eslint-disable */
/**
 * Invoicetronic API
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../../base';
// @ts-ignore
import type { ProblemHttpResult } from '../../src/models';
// @ts-ignore
import type { Update } from '../../src/models';
/**
 * UpdateApi - axios parameter creator
 * @export
 */
export const UpdateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates are notifications sent by the SDI about the status of invoices you sent.
         * @summary List updates
         * @param {number} [companyId] Company id
         * @param {string} [identifier] SDI identifier.
         * @param {string} [prestatore] Vat number or fiscal code.
         * @param {boolean} [unread] Unread items only.
         * @param {number} [sendId] Send item\&#39;s id.
         * @param {UpdateGetStateEnum} [state] SDI state
         * @param {string} [lastUpdateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [lastUpdateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [dateSentFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [dateSentTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [pageSize] Items per page. Defaults to 50. Cannot be greater than 200.
         * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGet: async (companyId?: number, identifier?: string, prestatore?: string, unread?: boolean, sendId?: number, state?: UpdateGetStateEnum, lastUpdateFrom?: string, lastUpdateTo?: string, dateSentFrom?: string, dateSentTo?: string, page?: number, pageSize?: number, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (identifier !== undefined) {
                localVarQueryParameter['identifier'] = identifier;
            }

            if (prestatore !== undefined) {
                localVarQueryParameter['prestatore'] = prestatore;
            }

            if (unread !== undefined) {
                localVarQueryParameter['unread'] = unread;
            }

            if (sendId !== undefined) {
                localVarQueryParameter['send_id'] = sendId;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (lastUpdateFrom !== undefined) {
                localVarQueryParameter['last_update_from'] = (lastUpdateFrom as any instanceof Date) ?
                    (lastUpdateFrom as any).toISOString() :
                    lastUpdateFrom;
            }

            if (lastUpdateTo !== undefined) {
                localVarQueryParameter['last_update_to'] = (lastUpdateTo as any instanceof Date) ?
                    (lastUpdateTo as any).toISOString() :
                    lastUpdateTo;
            }

            if (dateSentFrom !== undefined) {
                localVarQueryParameter['date_sent_from'] = (dateSentFrom as any instanceof Date) ?
                    (dateSentFrom as any).toISOString() :
                    dateSentFrom;
            }

            if (dateSentTo !== undefined) {
                localVarQueryParameter['date_sent_to'] = (dateSentTo as any instanceof Date) ?
                    (dateSentTo as any).toISOString() :
                    dateSentTo;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates are notifications sent by the SDI about the status of invoices you sent.
         * @summary Get an update by id
         * @param {number} id Item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateIdGet', 'id', id)
            const localVarPath = `/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UpdateApi - functional programming interface
 * @export
 */
export const UpdateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UpdateApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates are notifications sent by the SDI about the status of invoices you sent.
         * @summary List updates
         * @param {number} [companyId] Company id
         * @param {string} [identifier] SDI identifier.
         * @param {string} [prestatore] Vat number or fiscal code.
         * @param {boolean} [unread] Unread items only.
         * @param {number} [sendId] Send item\&#39;s id.
         * @param {UpdateGetStateEnum} [state] SDI state
         * @param {string} [lastUpdateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [lastUpdateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [dateSentFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [dateSentTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [pageSize] Items per page. Defaults to 50. Cannot be greater than 200.
         * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGet(companyId?: number, identifier?: string, prestatore?: string, unread?: boolean, sendId?: number, state?: UpdateGetStateEnum, lastUpdateFrom?: string, lastUpdateTo?: string, dateSentFrom?: string, dateSentTo?: string, page?: number, pageSize?: number, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Update>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGet(companyId, identifier, prestatore, unread, sendId, state, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, page, pageSize, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UpdateApi.updateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates are notifications sent by the SDI about the status of invoices you sent.
         * @summary Get an update by id
         * @param {number} id Item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Update>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UpdateApi.updateIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UpdateApi - factory interface
 * @export
 */
export const UpdateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UpdateApiFp(configuration)
    return {
        /**
         * Updates are notifications sent by the SDI about the status of invoices you sent.
         * @summary List updates
         * @param {number} [companyId] Company id
         * @param {string} [identifier] SDI identifier.
         * @param {string} [prestatore] Vat number or fiscal code.
         * @param {boolean} [unread] Unread items only.
         * @param {number} [sendId] Send item\&#39;s id.
         * @param {UpdateGetStateEnum} [state] SDI state
         * @param {string} [lastUpdateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [lastUpdateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [dateSentFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [dateSentTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [pageSize] Items per page. Defaults to 50. Cannot be greater than 200.
         * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGet(companyId?: number, identifier?: string, prestatore?: string, unread?: boolean, sendId?: number, state?: UpdateGetStateEnum, lastUpdateFrom?: string, lastUpdateTo?: string, dateSentFrom?: string, dateSentTo?: string, page?: number, pageSize?: number, sort?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Update>> {
            return localVarFp.updateGet(companyId, identifier, prestatore, unread, sendId, state, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, page, pageSize, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates are notifications sent by the SDI about the status of invoices you sent.
         * @summary Get an update by id
         * @param {number} id Item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Update> {
            return localVarFp.updateIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UpdateApi - interface
 * @export
 * @interface UpdateApi
 */
export interface UpdateApiInterface {
    /**
     * Updates are notifications sent by the SDI about the status of invoices you sent.
     * @summary List updates
     * @param {number} [companyId] Company id
     * @param {string} [identifier] SDI identifier.
     * @param {string} [prestatore] Vat number or fiscal code.
     * @param {boolean} [unread] Unread items only.
     * @param {number} [sendId] Send item\&#39;s id.
     * @param {UpdateGetStateEnum} [state] SDI state
     * @param {string} [lastUpdateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [lastUpdateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [dateSentFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [dateSentTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [pageSize] Items per page. Defaults to 50. Cannot be greater than 200.
     * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdateApiInterface
     */
    updateGet(companyId?: number, identifier?: string, prestatore?: string, unread?: boolean, sendId?: number, state?: UpdateGetStateEnum, lastUpdateFrom?: string, lastUpdateTo?: string, dateSentFrom?: string, dateSentTo?: string, page?: number, pageSize?: number, sort?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Update>>;

    /**
     * Updates are notifications sent by the SDI about the status of invoices you sent.
     * @summary Get an update by id
     * @param {number} id Item id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdateApiInterface
     */
    updateIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Update>;

}

/**
 * UpdateApi - object-oriented interface
 * @export
 * @class UpdateApi
 * @extends {BaseAPI}
 */
export class UpdateApi extends BaseAPI implements UpdateApiInterface {
    /**
     * Updates are notifications sent by the SDI about the status of invoices you sent.
     * @summary List updates
     * @param {number} [companyId] Company id
     * @param {string} [identifier] SDI identifier.
     * @param {string} [prestatore] Vat number or fiscal code.
     * @param {boolean} [unread] Unread items only.
     * @param {number} [sendId] Send item\&#39;s id.
     * @param {UpdateGetStateEnum} [state] SDI state
     * @param {string} [lastUpdateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [lastUpdateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [dateSentFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [dateSentTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [pageSize] Items per page. Defaults to 50. Cannot be greater than 200.
     * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdateApi
     */
    public updateGet(companyId?: number, identifier?: string, prestatore?: string, unread?: boolean, sendId?: number, state?: UpdateGetStateEnum, lastUpdateFrom?: string, lastUpdateTo?: string, dateSentFrom?: string, dateSentTo?: string, page?: number, pageSize?: number, sort?: string, options?: RawAxiosRequestConfig) {
        return UpdateApiFp(this.configuration).updateGet(companyId, identifier, prestatore, unread, sendId, state, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, page, pageSize, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates are notifications sent by the SDI about the status of invoices you sent.
     * @summary Get an update by id
     * @param {number} id Item id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdateApi
     */
    public updateIdGet(id: number, options?: RawAxiosRequestConfig) {
        return UpdateApiFp(this.configuration).updateIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const UpdateGetStateEnum = {
    Inviato: 'Inviato',
    Consegnato: 'Consegnato',
    NonConsegnato: 'NonConsegnato',
    Scartato: 'Scartato',
    AccettatoDalDestinatario: 'AccettatoDalDestinatario',
    RifiutatoDalDestinatario: 'RifiutatoDalDestinatario',
    ImpossibilitDiRecapito: 'ImpossibilitàDiRecapito',
    DecorrenzaTermini: 'DecorrenzaTermini',
    AttestazioneTrasmissioneFattura: 'AttestazioneTrasmissioneFattura'
} as const;
export type UpdateGetStateEnum = typeof UpdateGetStateEnum[keyof typeof UpdateGetStateEnum];
