/* tslint:disable */
/* eslint-disable */
/**
 * Invoicetronic API
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../../base';
// @ts-ignore
import type { ProblemDetails } from '../../src/models';
// @ts-ignore
import type { ProblemHttpResult } from '../../src/models';
// @ts-ignore
import type { WebHook } from '../../src/models';
// @ts-ignore
import type { WebHookHistory } from '../../src/models';
/**
 * WebhookApi - axios parameter creator
 * @export
 */
export const WebhookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
         * @summary List webhooks
         * @param {number} [companyId] Company id
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [pageSize] Items per page. Defaults to 50. Cannot be greater than 200.
         * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
         * @param {string} [description] 
         * @param {boolean} [enabled] 
         * @param {string} [events] 
         * @param {string} [url] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookGet: async (companyId?: number, page?: number, pageSize?: number, sort?: string, description?: string, enabled?: boolean, events?: string, url?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }

            if (events !== undefined) {
                localVarQueryParameter['events'] = events;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
         * @summary Delete a webhook by id
         * @param {number} id Item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhookIdDelete', 'id', id)
            const localVarPath = `/webhook/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
         * @summary Get a webhook by id
         * @param {number} id Item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhookIdGet', 'id', id)
            const localVarPath = `/webhook/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
         * @summary Add a webhook
         * @param {WebHook} webHook 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookPost: async (webHook: WebHook, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webHook' is not null or undefined
            assertParamExists('webhookPost', 'webHook', webHook)
            const localVarPath = `/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webHook, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
         * @summary Update a webhook
         * @param {WebHook} webHook 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookPut: async (webHook: WebHook, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webHook' is not null or undefined
            assertParamExists('webhookPut', 'webHook', webHook)
            const localVarPath = `/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webHook, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Webhook history items are stored in the database and can be accessed via the API. They are preserved for 15 in both the live and sandbox environments.
         * @summary List webhook history items
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [pageSize] Items per page. Defaults to 50. Cannot be greater than 200.
         * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
         * @param {number} [webhookId] WebHook id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookhistoryGet: async (page?: number, pageSize?: number, sort?: string, webhookId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/webhookhistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (webhookId !== undefined) {
                localVarQueryParameter['webhook_id'] = webhookId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Webhook history items are stored in the database and can be accessed via the API. They are preserved for 15 in both the live and sandbox environments.
         * @summary Get a webhook history item by id
         * @param {number} id Item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookhistoryIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhookhistoryIdGet', 'id', id)
            const localVarPath = `/webhookhistory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhookApi - functional programming interface
 * @export
 */
export const WebhookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhookApiAxiosParamCreator(configuration)
    return {
        /**
         * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
         * @summary List webhooks
         * @param {number} [companyId] Company id
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [pageSize] Items per page. Defaults to 50. Cannot be greater than 200.
         * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
         * @param {string} [description] 
         * @param {boolean} [enabled] 
         * @param {string} [events] 
         * @param {string} [url] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookGet(companyId?: number, page?: number, pageSize?: number, sort?: string, description?: string, enabled?: boolean, events?: string, url?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WebHook>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookGet(companyId, page, pageSize, sort, description, enabled, events, url, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhookApi.webhookGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
         * @summary Delete a webhook by id
         * @param {number} id Item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebHook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhookApi.webhookIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
         * @summary Get a webhook by id
         * @param {number} id Item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebHook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhookApi.webhookIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
         * @summary Add a webhook
         * @param {WebHook} webHook 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookPost(webHook: WebHook, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebHook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookPost(webHook, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhookApi.webhookPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
         * @summary Update a webhook
         * @param {WebHook} webHook 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookPut(webHook: WebHook, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebHook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookPut(webHook, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhookApi.webhookPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Webhook history items are stored in the database and can be accessed via the API. They are preserved for 15 in both the live and sandbox environments.
         * @summary List webhook history items
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [pageSize] Items per page. Defaults to 50. Cannot be greater than 200.
         * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
         * @param {number} [webhookId] WebHook id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookhistoryGet(page?: number, pageSize?: number, sort?: string, webhookId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WebHookHistory>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookhistoryGet(page, pageSize, sort, webhookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhookApi.webhookhistoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Webhook history items are stored in the database and can be accessed via the API. They are preserved for 15 in both the live and sandbox environments.
         * @summary Get a webhook history item by id
         * @param {number} id Item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookhistoryIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebHookHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookhistoryIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhookApi.webhookhistoryIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WebhookApi - factory interface
 * @export
 */
export const WebhookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhookApiFp(configuration)
    return {
        /**
         * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
         * @summary List webhooks
         * @param {number} [companyId] Company id
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [pageSize] Items per page. Defaults to 50. Cannot be greater than 200.
         * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
         * @param {string} [description] 
         * @param {boolean} [enabled] 
         * @param {string} [events] 
         * @param {string} [url] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookGet(companyId?: number, page?: number, pageSize?: number, sort?: string, description?: string, enabled?: boolean, events?: string, url?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<WebHook>> {
            return localVarFp.webhookGet(companyId, page, pageSize, sort, description, enabled, events, url, options).then((request) => request(axios, basePath));
        },
        /**
         * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
         * @summary Delete a webhook by id
         * @param {number} id Item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<WebHook> {
            return localVarFp.webhookIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
         * @summary Get a webhook by id
         * @param {number} id Item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<WebHook> {
            return localVarFp.webhookIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
         * @summary Add a webhook
         * @param {WebHook} webHook 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookPost(webHook: WebHook, options?: RawAxiosRequestConfig): AxiosPromise<WebHook> {
            return localVarFp.webhookPost(webHook, options).then((request) => request(axios, basePath));
        },
        /**
         * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
         * @summary Update a webhook
         * @param {WebHook} webHook 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookPut(webHook: WebHook, options?: RawAxiosRequestConfig): AxiosPromise<WebHook> {
            return localVarFp.webhookPut(webHook, options).then((request) => request(axios, basePath));
        },
        /**
         * Webhook history items are stored in the database and can be accessed via the API. They are preserved for 15 in both the live and sandbox environments.
         * @summary List webhook history items
         * @param {number} [page] Page number. Defaults to 1.
         * @param {number} [pageSize] Items per page. Defaults to 50. Cannot be greater than 200.
         * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
         * @param {number} [webhookId] WebHook id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookhistoryGet(page?: number, pageSize?: number, sort?: string, webhookId?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<WebHookHistory>> {
            return localVarFp.webhookhistoryGet(page, pageSize, sort, webhookId, options).then((request) => request(axios, basePath));
        },
        /**
         * Webhook history items are stored in the database and can be accessed via the API. They are preserved for 15 in both the live and sandbox environments.
         * @summary Get a webhook history item by id
         * @param {number} id Item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookhistoryIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<WebHookHistory> {
            return localVarFp.webhookhistoryIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebhookApi - interface
 * @export
 * @interface WebhookApi
 */
export interface WebhookApiInterface {
    /**
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @summary List webhooks
     * @param {number} [companyId] Company id
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [pageSize] Items per page. Defaults to 50. Cannot be greater than 200.
     * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
     * @param {string} [description] 
     * @param {boolean} [enabled] 
     * @param {string} [events] 
     * @param {string} [url] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiInterface
     */
    webhookGet(companyId?: number, page?: number, pageSize?: number, sort?: string, description?: string, enabled?: boolean, events?: string, url?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<WebHook>>;

    /**
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @summary Delete a webhook by id
     * @param {number} id Item id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiInterface
     */
    webhookIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<WebHook>;

    /**
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @summary Get a webhook by id
     * @param {number} id Item id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiInterface
     */
    webhookIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<WebHook>;

    /**
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @summary Add a webhook
     * @param {WebHook} webHook 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiInterface
     */
    webhookPost(webHook: WebHook, options?: RawAxiosRequestConfig): AxiosPromise<WebHook>;

    /**
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @summary Update a webhook
     * @param {WebHook} webHook 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiInterface
     */
    webhookPut(webHook: WebHook, options?: RawAxiosRequestConfig): AxiosPromise<WebHook>;

    /**
     * Webhook history items are stored in the database and can be accessed via the API. They are preserved for 15 in both the live and sandbox environments.
     * @summary List webhook history items
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [pageSize] Items per page. Defaults to 50. Cannot be greater than 200.
     * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
     * @param {number} [webhookId] WebHook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiInterface
     */
    webhookhistoryGet(page?: number, pageSize?: number, sort?: string, webhookId?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<WebHookHistory>>;

    /**
     * Webhook history items are stored in the database and can be accessed via the API. They are preserved for 15 in both the live and sandbox environments.
     * @summary Get a webhook history item by id
     * @param {number} id Item id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiInterface
     */
    webhookhistoryIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<WebHookHistory>;

}

/**
 * WebhookApi - object-oriented interface
 * @export
 * @class WebhookApi
 * @extends {BaseAPI}
 */
export class WebhookApi extends BaseAPI implements WebhookApiInterface {
    /**
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @summary List webhooks
     * @param {number} [companyId] Company id
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [pageSize] Items per page. Defaults to 50. Cannot be greater than 200.
     * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
     * @param {string} [description] 
     * @param {boolean} [enabled] 
     * @param {string} [events] 
     * @param {string} [url] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public webhookGet(companyId?: number, page?: number, pageSize?: number, sort?: string, description?: string, enabled?: boolean, events?: string, url?: string, options?: RawAxiosRequestConfig) {
        return WebhookApiFp(this.configuration).webhookGet(companyId, page, pageSize, sort, description, enabled, events, url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @summary Delete a webhook by id
     * @param {number} id Item id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public webhookIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return WebhookApiFp(this.configuration).webhookIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @summary Get a webhook by id
     * @param {number} id Item id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public webhookIdGet(id: number, options?: RawAxiosRequestConfig) {
        return WebhookApiFp(this.configuration).webhookIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @summary Add a webhook
     * @param {WebHook} webHook 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public webhookPost(webHook: WebHook, options?: RawAxiosRequestConfig) {
        return WebhookApiFp(this.configuration).webhookPost(webHook, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
     * @summary Update a webhook
     * @param {WebHook} webHook 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public webhookPut(webHook: WebHook, options?: RawAxiosRequestConfig) {
        return WebhookApiFp(this.configuration).webhookPut(webHook, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Webhook history items are stored in the database and can be accessed via the API. They are preserved for 15 in both the live and sandbox environments.
     * @summary List webhook history items
     * @param {number} [page] Page number. Defaults to 1.
     * @param {number} [pageSize] Items per page. Defaults to 50. Cannot be greater than 200.
     * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
     * @param {number} [webhookId] WebHook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public webhookhistoryGet(page?: number, pageSize?: number, sort?: string, webhookId?: number, options?: RawAxiosRequestConfig) {
        return WebhookApiFp(this.configuration).webhookhistoryGet(page, pageSize, sort, webhookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Webhook history items are stored in the database and can be accessed via the API. They are preserved for 15 in both the live and sandbox environments.
     * @summary Get a webhook history item by id
     * @param {number} id Item id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public webhookhistoryIdGet(id: number, options?: RawAxiosRequestConfig) {
        return WebhookApiFp(this.configuration).webhookhistoryIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}

