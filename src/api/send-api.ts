/* tslint:disable */
/* eslint-disable */
/**
 * Invoicetronic API
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../../base';
// @ts-ignore
import type { FatturaOrdinaria } from '../../src/models';
// @ts-ignore
import type { ProblemDetails } from '../../src/models';
// @ts-ignore
import type { ProblemHttpResult } from '../../src/models';
// @ts-ignore
import type { Send } from '../../src/models';
/**
 * SendApi - axios parameter creator
 * @export
 */
export const SendApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Add an invoice by file
         * @param {File} file 
         * @param {boolean} [validate] Validate the document first, and reject it on failure.
         * @param {SendFilePostSignatureEnum} [signature] Whether to digitally sign the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendFilePost: async (file: File, validate?: boolean, signature?: SendFilePostSignatureEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('sendFilePost', 'file', file)
            const localVarPath = `/send/file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (validate !== undefined) {
                localVarQueryParameter['validate'] = validate;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * test **markdown**.
         * @summary List invoices
         * @param {number} [companyId] Company id
         * @param {string} [identifier] SDI identifier.
         * @param {string} [committente] Vat number or fiscal code.
         * @param {string} [prestatore] Vat number or fiscal code.
         * @param {string} [fileName] File name.
         * @param {string} [lastUpdateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [lastUpdateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [dateSentFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [dateSentTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [documentDateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [documentDateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [documentNumber] Document number.
         * @param {boolean} [includePayload] Include payload in the response. Defaults to false.
         * @param {number} [page] Page number.
         * @param {number} [pageSize] Items per page. Cannot be greater than 200.
         * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendGet: async (companyId?: number, identifier?: string, committente?: string, prestatore?: string, fileName?: string, lastUpdateFrom?: string, lastUpdateTo?: string, dateSentFrom?: string, dateSentTo?: string, documentDateFrom?: string, documentDateTo?: string, documentNumber?: string, includePayload?: boolean, page?: number, pageSize?: number, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (identifier !== undefined) {
                localVarQueryParameter['identifier'] = identifier;
            }

            if (committente !== undefined) {
                localVarQueryParameter['committente'] = committente;
            }

            if (prestatore !== undefined) {
                localVarQueryParameter['prestatore'] = prestatore;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }

            if (lastUpdateFrom !== undefined) {
                localVarQueryParameter['last_update_from'] = (lastUpdateFrom as any instanceof Date) ?
                    (lastUpdateFrom as any).toISOString() :
                    lastUpdateFrom;
            }

            if (lastUpdateTo !== undefined) {
                localVarQueryParameter['last_update_to'] = (lastUpdateTo as any instanceof Date) ?
                    (lastUpdateTo as any).toISOString() :
                    lastUpdateTo;
            }

            if (dateSentFrom !== undefined) {
                localVarQueryParameter['date_sent_from'] = (dateSentFrom as any instanceof Date) ?
                    (dateSentFrom as any).toISOString() :
                    dateSentFrom;
            }

            if (dateSentTo !== undefined) {
                localVarQueryParameter['date_sent_to'] = (dateSentTo as any instanceof Date) ?
                    (dateSentTo as any).toISOString() :
                    dateSentTo;
            }

            if (documentDateFrom !== undefined) {
                localVarQueryParameter['document_date_from'] = (documentDateFrom as any instanceof Date) ?
                    (documentDateFrom as any).toISOString() :
                    documentDateFrom;
            }

            if (documentDateTo !== undefined) {
                localVarQueryParameter['document_date_to'] = (documentDateTo as any instanceof Date) ?
                    (documentDateTo as any).toISOString() :
                    documentDateTo;
            }

            if (documentNumber !== undefined) {
                localVarQueryParameter['document_number'] = documentNumber;
            }

            if (includePayload !== undefined) {
                localVarQueryParameter['include_payload'] = includePayload;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Get a invoice by id
         * @param {number} id Item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sendIdGet', 'id', id)
            const localVarPath = `/send/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Add an invoice by json
         * @param {FatturaOrdinaria} fatturaOrdinaria 
         * @param {boolean} [validate] Validate the document first, and reject it on failure.
         * @param {SendJsonPostSignatureEnum} [signature] Whether to digitally sign the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendJsonPost: async (fatturaOrdinaria: FatturaOrdinaria, validate?: boolean, signature?: SendJsonPostSignatureEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fatturaOrdinaria' is not null or undefined
            assertParamExists('sendJsonPost', 'fatturaOrdinaria', fatturaOrdinaria)
            const localVarPath = `/send/json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (validate !== undefined) {
                localVarQueryParameter['validate'] = validate;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fatturaOrdinaria, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Add an invoice
         * @param {Send} send 
         * @param {boolean} [validate] Validate the document first, and reject it on failure.
         * @param {SendPostSignatureEnum} [signature] Whether to digitally sign the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPost: async (send: Send, validate?: boolean, signature?: SendPostSignatureEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'send' is not null or undefined
            assertParamExists('sendPost', 'send', send)
            const localVarPath = `/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (validate !== undefined) {
                localVarQueryParameter['validate'] = validate;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(send, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Validate an invoice file
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendValidateFilePost: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('sendValidateFilePost', 'file', file)
            const localVarPath = `/send/validate/file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Validate an invoice by json
         * @param {FatturaOrdinaria} fatturaOrdinaria 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendValidateJsonPost: async (fatturaOrdinaria: FatturaOrdinaria, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fatturaOrdinaria' is not null or undefined
            assertParamExists('sendValidateJsonPost', 'fatturaOrdinaria', fatturaOrdinaria)
            const localVarPath = `/send/validate/json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fatturaOrdinaria, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Validate an invoice
         * @param {Send} send 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendValidatePost: async (send: Send, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'send' is not null or undefined
            assertParamExists('sendValidatePost', 'send', send)
            const localVarPath = `/send/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(send, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Validate an invoice by xml
         * @param {FatturaOrdinaria} fatturaOrdinaria 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendValidateXmlPost: async (fatturaOrdinaria: FatturaOrdinaria, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fatturaOrdinaria' is not null or undefined
            assertParamExists('sendValidateXmlPost', 'fatturaOrdinaria', fatturaOrdinaria)
            const localVarPath = `/send/validate/xml`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fatturaOrdinaria, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Add an invoice by xml
         * @param {FatturaOrdinaria} fatturaOrdinaria 
         * @param {boolean} [validate] Validate the document first, and reject it on failure.
         * @param {SendXmlPostSignatureEnum} [signature] Whether to digitally sign the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendXmlPost: async (fatturaOrdinaria: FatturaOrdinaria, validate?: boolean, signature?: SendXmlPostSignatureEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fatturaOrdinaria' is not null or undefined
            assertParamExists('sendXmlPost', 'fatturaOrdinaria', fatturaOrdinaria)
            const localVarPath = `/send/xml`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (validate !== undefined) {
                localVarQueryParameter['validate'] = validate;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fatturaOrdinaria, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SendApi - functional programming interface
 * @export
 */
export const SendApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SendApiAxiosParamCreator(configuration)
    return {
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Add an invoice by file
         * @param {File} file 
         * @param {boolean} [validate] Validate the document first, and reject it on failure.
         * @param {SendFilePostSignatureEnum} [signature] Whether to digitally sign the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendFilePost(file: File, validate?: boolean, signature?: SendFilePostSignatureEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Send>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendFilePost(file, validate, signature, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendApi.sendFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * test **markdown**.
         * @summary List invoices
         * @param {number} [companyId] Company id
         * @param {string} [identifier] SDI identifier.
         * @param {string} [committente] Vat number or fiscal code.
         * @param {string} [prestatore] Vat number or fiscal code.
         * @param {string} [fileName] File name.
         * @param {string} [lastUpdateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [lastUpdateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [dateSentFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [dateSentTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [documentDateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [documentDateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [documentNumber] Document number.
         * @param {boolean} [includePayload] Include payload in the response. Defaults to false.
         * @param {number} [page] Page number.
         * @param {number} [pageSize] Items per page. Cannot be greater than 200.
         * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendGet(companyId?: number, identifier?: string, committente?: string, prestatore?: string, fileName?: string, lastUpdateFrom?: string, lastUpdateTo?: string, dateSentFrom?: string, dateSentTo?: string, documentDateFrom?: string, documentDateTo?: string, documentNumber?: string, includePayload?: boolean, page?: number, pageSize?: number, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Send>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendGet(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, includePayload, page, pageSize, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendApi.sendGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Get a invoice by id
         * @param {number} id Item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Send>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendApi.sendIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Add an invoice by json
         * @param {FatturaOrdinaria} fatturaOrdinaria 
         * @param {boolean} [validate] Validate the document first, and reject it on failure.
         * @param {SendJsonPostSignatureEnum} [signature] Whether to digitally sign the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendJsonPost(fatturaOrdinaria: FatturaOrdinaria, validate?: boolean, signature?: SendJsonPostSignatureEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Send>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendJsonPost(fatturaOrdinaria, validate, signature, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendApi.sendJsonPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Add an invoice
         * @param {Send} send 
         * @param {boolean} [validate] Validate the document first, and reject it on failure.
         * @param {SendPostSignatureEnum} [signature] Whether to digitally sign the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendPost(send: Send, validate?: boolean, signature?: SendPostSignatureEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Send>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendPost(send, validate, signature, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendApi.sendPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Validate an invoice file
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendValidateFilePost(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendValidateFilePost(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendApi.sendValidateFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Validate an invoice by json
         * @param {FatturaOrdinaria} fatturaOrdinaria 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendValidateJsonPost(fatturaOrdinaria: FatturaOrdinaria, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendValidateJsonPost(fatturaOrdinaria, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendApi.sendValidateJsonPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Validate an invoice
         * @param {Send} send 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendValidatePost(send: Send, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendValidatePost(send, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendApi.sendValidatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Validate an invoice by xml
         * @param {FatturaOrdinaria} fatturaOrdinaria 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendValidateXmlPost(fatturaOrdinaria: FatturaOrdinaria, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendValidateXmlPost(fatturaOrdinaria, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendApi.sendValidateXmlPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Add an invoice by xml
         * @param {FatturaOrdinaria} fatturaOrdinaria 
         * @param {boolean} [validate] Validate the document first, and reject it on failure.
         * @param {SendXmlPostSignatureEnum} [signature] Whether to digitally sign the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendXmlPost(fatturaOrdinaria: FatturaOrdinaria, validate?: boolean, signature?: SendXmlPostSignatureEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Send>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendXmlPost(fatturaOrdinaria, validate, signature, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendApi.sendXmlPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SendApi - factory interface
 * @export
 */
export const SendApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SendApiFp(configuration)
    return {
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Add an invoice by file
         * @param {File} file 
         * @param {boolean} [validate] Validate the document first, and reject it on failure.
         * @param {SendFilePostSignatureEnum} [signature] Whether to digitally sign the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendFilePost(file: File, validate?: boolean, signature?: SendFilePostSignatureEnum, options?: RawAxiosRequestConfig): AxiosPromise<Send> {
            return localVarFp.sendFilePost(file, validate, signature, options).then((request) => request(axios, basePath));
        },
        /**
         * test **markdown**.
         * @summary List invoices
         * @param {number} [companyId] Company id
         * @param {string} [identifier] SDI identifier.
         * @param {string} [committente] Vat number or fiscal code.
         * @param {string} [prestatore] Vat number or fiscal code.
         * @param {string} [fileName] File name.
         * @param {string} [lastUpdateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [lastUpdateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [dateSentFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [dateSentTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [documentDateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [documentDateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
         * @param {string} [documentNumber] Document number.
         * @param {boolean} [includePayload] Include payload in the response. Defaults to false.
         * @param {number} [page] Page number.
         * @param {number} [pageSize] Items per page. Cannot be greater than 200.
         * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendGet(companyId?: number, identifier?: string, committente?: string, prestatore?: string, fileName?: string, lastUpdateFrom?: string, lastUpdateTo?: string, dateSentFrom?: string, dateSentTo?: string, documentDateFrom?: string, documentDateTo?: string, documentNumber?: string, includePayload?: boolean, page?: number, pageSize?: number, sort?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Send>> {
            return localVarFp.sendGet(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, includePayload, page, pageSize, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Get a invoice by id
         * @param {number} id Item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Send> {
            return localVarFp.sendIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Add an invoice by json
         * @param {FatturaOrdinaria} fatturaOrdinaria 
         * @param {boolean} [validate] Validate the document first, and reject it on failure.
         * @param {SendJsonPostSignatureEnum} [signature] Whether to digitally sign the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendJsonPost(fatturaOrdinaria: FatturaOrdinaria, validate?: boolean, signature?: SendJsonPostSignatureEnum, options?: RawAxiosRequestConfig): AxiosPromise<Send> {
            return localVarFp.sendJsonPost(fatturaOrdinaria, validate, signature, options).then((request) => request(axios, basePath));
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Add an invoice
         * @param {Send} send 
         * @param {boolean} [validate] Validate the document first, and reject it on failure.
         * @param {SendPostSignatureEnum} [signature] Whether to digitally sign the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPost(send: Send, validate?: boolean, signature?: SendPostSignatureEnum, options?: RawAxiosRequestConfig): AxiosPromise<Send> {
            return localVarFp.sendPost(send, validate, signature, options).then((request) => request(axios, basePath));
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Validate an invoice file
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendValidateFilePost(file: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendValidateFilePost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Validate an invoice by json
         * @param {FatturaOrdinaria} fatturaOrdinaria 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendValidateJsonPost(fatturaOrdinaria: FatturaOrdinaria, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendValidateJsonPost(fatturaOrdinaria, options).then((request) => request(axios, basePath));
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Validate an invoice
         * @param {Send} send 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendValidatePost(send: Send, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendValidatePost(send, options).then((request) => request(axios, basePath));
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Validate an invoice by xml
         * @param {FatturaOrdinaria} fatturaOrdinaria 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendValidateXmlPost(fatturaOrdinaria: FatturaOrdinaria, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendValidateXmlPost(fatturaOrdinaria, options).then((request) => request(axios, basePath));
        },
        /**
         * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
         * @summary Add an invoice by xml
         * @param {FatturaOrdinaria} fatturaOrdinaria 
         * @param {boolean} [validate] Validate the document first, and reject it on failure.
         * @param {SendXmlPostSignatureEnum} [signature] Whether to digitally sign the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendXmlPost(fatturaOrdinaria: FatturaOrdinaria, validate?: boolean, signature?: SendXmlPostSignatureEnum, options?: RawAxiosRequestConfig): AxiosPromise<Send> {
            return localVarFp.sendXmlPost(fatturaOrdinaria, validate, signature, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SendApi - interface
 * @export
 * @interface SendApi
 */
export interface SendApiInterface {
    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Add an invoice by file
     * @param {File} file 
     * @param {boolean} [validate] Validate the document first, and reject it on failure.
     * @param {SendFilePostSignatureEnum} [signature] Whether to digitally sign the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApiInterface
     */
    sendFilePost(file: File, validate?: boolean, signature?: SendFilePostSignatureEnum, options?: RawAxiosRequestConfig): AxiosPromise<Send>;

    /**
     * test **markdown**.
     * @summary List invoices
     * @param {number} [companyId] Company id
     * @param {string} [identifier] SDI identifier.
     * @param {string} [committente] Vat number or fiscal code.
     * @param {string} [prestatore] Vat number or fiscal code.
     * @param {string} [fileName] File name.
     * @param {string} [lastUpdateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [lastUpdateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [dateSentFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [dateSentTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [documentDateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [documentDateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [documentNumber] Document number.
     * @param {boolean} [includePayload] Include payload in the response. Defaults to false.
     * @param {number} [page] Page number.
     * @param {number} [pageSize] Items per page. Cannot be greater than 200.
     * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApiInterface
     */
    sendGet(companyId?: number, identifier?: string, committente?: string, prestatore?: string, fileName?: string, lastUpdateFrom?: string, lastUpdateTo?: string, dateSentFrom?: string, dateSentTo?: string, documentDateFrom?: string, documentDateTo?: string, documentNumber?: string, includePayload?: boolean, page?: number, pageSize?: number, sort?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Send>>;

    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Get a invoice by id
     * @param {number} id Item id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApiInterface
     */
    sendIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Send>;

    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Add an invoice by json
     * @param {FatturaOrdinaria} fatturaOrdinaria 
     * @param {boolean} [validate] Validate the document first, and reject it on failure.
     * @param {SendJsonPostSignatureEnum} [signature] Whether to digitally sign the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApiInterface
     */
    sendJsonPost(fatturaOrdinaria: FatturaOrdinaria, validate?: boolean, signature?: SendJsonPostSignatureEnum, options?: RawAxiosRequestConfig): AxiosPromise<Send>;

    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Add an invoice
     * @param {Send} send 
     * @param {boolean} [validate] Validate the document first, and reject it on failure.
     * @param {SendPostSignatureEnum} [signature] Whether to digitally sign the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApiInterface
     */
    sendPost(send: Send, validate?: boolean, signature?: SendPostSignatureEnum, options?: RawAxiosRequestConfig): AxiosPromise<Send>;

    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Validate an invoice file
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApiInterface
     */
    sendValidateFilePost(file: File, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Validate an invoice by json
     * @param {FatturaOrdinaria} fatturaOrdinaria 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApiInterface
     */
    sendValidateJsonPost(fatturaOrdinaria: FatturaOrdinaria, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Validate an invoice
     * @param {Send} send 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApiInterface
     */
    sendValidatePost(send: Send, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Validate an invoice by xml
     * @param {FatturaOrdinaria} fatturaOrdinaria 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApiInterface
     */
    sendValidateXmlPost(fatturaOrdinaria: FatturaOrdinaria, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Add an invoice by xml
     * @param {FatturaOrdinaria} fatturaOrdinaria 
     * @param {boolean} [validate] Validate the document first, and reject it on failure.
     * @param {SendXmlPostSignatureEnum} [signature] Whether to digitally sign the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApiInterface
     */
    sendXmlPost(fatturaOrdinaria: FatturaOrdinaria, validate?: boolean, signature?: SendXmlPostSignatureEnum, options?: RawAxiosRequestConfig): AxiosPromise<Send>;

}

/**
 * SendApi - object-oriented interface
 * @export
 * @class SendApi
 * @extends {BaseAPI}
 */
export class SendApi extends BaseAPI implements SendApiInterface {
    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Add an invoice by file
     * @param {File} file 
     * @param {boolean} [validate] Validate the document first, and reject it on failure.
     * @param {SendFilePostSignatureEnum} [signature] Whether to digitally sign the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApi
     */
    public sendFilePost(file: File, validate?: boolean, signature?: SendFilePostSignatureEnum, options?: RawAxiosRequestConfig) {
        return SendApiFp(this.configuration).sendFilePost(file, validate, signature, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * test **markdown**.
     * @summary List invoices
     * @param {number} [companyId] Company id
     * @param {string} [identifier] SDI identifier.
     * @param {string} [committente] Vat number or fiscal code.
     * @param {string} [prestatore] Vat number or fiscal code.
     * @param {string} [fileName] File name.
     * @param {string} [lastUpdateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [lastUpdateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [dateSentFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [dateSentTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [documentDateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [documentDateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {string} [documentNumber] Document number.
     * @param {boolean} [includePayload] Include payload in the response. Defaults to false.
     * @param {number} [page] Page number.
     * @param {number} [pageSize] Items per page. Cannot be greater than 200.
     * @param {string} [sort] Sort by field. Prefix with \&#39;-\&#39; for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApi
     */
    public sendGet(companyId?: number, identifier?: string, committente?: string, prestatore?: string, fileName?: string, lastUpdateFrom?: string, lastUpdateTo?: string, dateSentFrom?: string, dateSentTo?: string, documentDateFrom?: string, documentDateTo?: string, documentNumber?: string, includePayload?: boolean, page?: number, pageSize?: number, sort?: string, options?: RawAxiosRequestConfig) {
        return SendApiFp(this.configuration).sendGet(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, includePayload, page, pageSize, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Get a invoice by id
     * @param {number} id Item id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApi
     */
    public sendIdGet(id: number, options?: RawAxiosRequestConfig) {
        return SendApiFp(this.configuration).sendIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Add an invoice by json
     * @param {FatturaOrdinaria} fatturaOrdinaria 
     * @param {boolean} [validate] Validate the document first, and reject it on failure.
     * @param {SendJsonPostSignatureEnum} [signature] Whether to digitally sign the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApi
     */
    public sendJsonPost(fatturaOrdinaria: FatturaOrdinaria, validate?: boolean, signature?: SendJsonPostSignatureEnum, options?: RawAxiosRequestConfig) {
        return SendApiFp(this.configuration).sendJsonPost(fatturaOrdinaria, validate, signature, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Add an invoice
     * @param {Send} send 
     * @param {boolean} [validate] Validate the document first, and reject it on failure.
     * @param {SendPostSignatureEnum} [signature] Whether to digitally sign the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApi
     */
    public sendPost(send: Send, validate?: boolean, signature?: SendPostSignatureEnum, options?: RawAxiosRequestConfig) {
        return SendApiFp(this.configuration).sendPost(send, validate, signature, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Validate an invoice file
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApi
     */
    public sendValidateFilePost(file: File, options?: RawAxiosRequestConfig) {
        return SendApiFp(this.configuration).sendValidateFilePost(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Validate an invoice by json
     * @param {FatturaOrdinaria} fatturaOrdinaria 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApi
     */
    public sendValidateJsonPost(fatturaOrdinaria: FatturaOrdinaria, options?: RawAxiosRequestConfig) {
        return SendApiFp(this.configuration).sendValidateJsonPost(fatturaOrdinaria, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Validate an invoice
     * @param {Send} send 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApi
     */
    public sendValidatePost(send: Send, options?: RawAxiosRequestConfig) {
        return SendApiFp(this.configuration).sendValidatePost(send, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Validate an invoice by xml
     * @param {FatturaOrdinaria} fatturaOrdinaria 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApi
     */
    public sendValidateXmlPost(fatturaOrdinaria: FatturaOrdinaria, options?: RawAxiosRequestConfig) {
        return SendApiFp(this.configuration).sendValidateXmlPost(fatturaOrdinaria, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @summary Add an invoice by xml
     * @param {FatturaOrdinaria} fatturaOrdinaria 
     * @param {boolean} [validate] Validate the document first, and reject it on failure.
     * @param {SendXmlPostSignatureEnum} [signature] Whether to digitally sign the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApi
     */
    public sendXmlPost(fatturaOrdinaria: FatturaOrdinaria, validate?: boolean, signature?: SendXmlPostSignatureEnum, options?: RawAxiosRequestConfig) {
        return SendApiFp(this.configuration).sendXmlPost(fatturaOrdinaria, validate, signature, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SendFilePostSignatureEnum = {
    None: 'None',
    Apply: 'Apply',
    Force: 'Force',
    Auto: 'Auto'
} as const;
export type SendFilePostSignatureEnum = typeof SendFilePostSignatureEnum[keyof typeof SendFilePostSignatureEnum];
/**
 * @export
 */
export const SendJsonPostSignatureEnum = {
    None: 'None',
    Apply: 'Apply',
    Force: 'Force',
    Auto: 'Auto'
} as const;
export type SendJsonPostSignatureEnum = typeof SendJsonPostSignatureEnum[keyof typeof SendJsonPostSignatureEnum];
/**
 * @export
 */
export const SendPostSignatureEnum = {
    None: 'None',
    Apply: 'Apply',
    Force: 'Force',
    Auto: 'Auto'
} as const;
export type SendPostSignatureEnum = typeof SendPostSignatureEnum[keyof typeof SendPostSignatureEnum];
/**
 * @export
 */
export const SendXmlPostSignatureEnum = {
    None: 'None',
    Apply: 'Apply',
    Force: 'Force',
    Auto: 'Auto'
} as const;
export type SendXmlPostSignatureEnum = typeof SendXmlPostSignatureEnum[keyof typeof SendXmlPostSignatureEnum];
